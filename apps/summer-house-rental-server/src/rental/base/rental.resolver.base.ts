/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Rental } from "./Rental";
import { RentalCountArgs } from "./RentalCountArgs";
import { RentalFindManyArgs } from "./RentalFindManyArgs";
import { RentalFindUniqueArgs } from "./RentalFindUniqueArgs";
import { CreateRentalArgs } from "./CreateRentalArgs";
import { UpdateRentalArgs } from "./UpdateRentalArgs";
import { DeleteRentalArgs } from "./DeleteRentalArgs";
import { House } from "../../house/base/House";
import { Renter } from "../../renter/base/Renter";
import { RentalService } from "../rental.service";
@graphql.Resolver(() => Rental)
export class RentalResolverBase {
  constructor(protected readonly service: RentalService) {}

  async _rentalsMeta(
    @graphql.Args() args: RentalCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Rental])
  async rentals(@graphql.Args() args: RentalFindManyArgs): Promise<Rental[]> {
    return this.service.rentals(args);
  }

  @graphql.Query(() => Rental, { nullable: true })
  async rental(
    @graphql.Args() args: RentalFindUniqueArgs
  ): Promise<Rental | null> {
    const result = await this.service.rental(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Rental)
  async createRental(@graphql.Args() args: CreateRentalArgs): Promise<Rental> {
    return await this.service.createRental({
      ...args,
      data: {
        ...args.data,

        house: args.data.house
          ? {
              connect: args.data.house,
            }
          : undefined,

        renter: args.data.renter
          ? {
              connect: args.data.renter,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Rental)
  async updateRental(
    @graphql.Args() args: UpdateRentalArgs
  ): Promise<Rental | null> {
    try {
      return await this.service.updateRental({
        ...args,
        data: {
          ...args.data,

          house: args.data.house
            ? {
                connect: args.data.house,
              }
            : undefined,

          renter: args.data.renter
            ? {
                connect: args.data.renter,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Rental)
  async deleteRental(
    @graphql.Args() args: DeleteRentalArgs
  ): Promise<Rental | null> {
    try {
      return await this.service.deleteRental(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => House, {
    nullable: true,
    name: "house",
  })
  async getHouse(@graphql.Parent() parent: Rental): Promise<House | null> {
    const result = await this.service.getHouse(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Renter, {
    nullable: true,
    name: "renter",
  })
  async getRenter(@graphql.Parent() parent: Rental): Promise<Renter | null> {
    const result = await this.service.getRenter(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
