/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RenterService } from "../renter.service";
import { RenterCreateInput } from "./RenterCreateInput";
import { Renter } from "./Renter";
import { RenterFindManyArgs } from "./RenterFindManyArgs";
import { RenterWhereUniqueInput } from "./RenterWhereUniqueInput";
import { RenterUpdateInput } from "./RenterUpdateInput";
import { RentalFindManyArgs } from "../../rental/base/RentalFindManyArgs";
import { Rental } from "../../rental/base/Rental";
import { RentalWhereUniqueInput } from "../../rental/base/RentalWhereUniqueInput";

export class RenterControllerBase {
  constructor(protected readonly service: RenterService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Renter })
  async createRenter(@common.Body() data: RenterCreateInput): Promise<Renter> {
    return await this.service.createRenter({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Renter] })
  @ApiNestedQuery(RenterFindManyArgs)
  async renters(@common.Req() request: Request): Promise<Renter[]> {
    const args = plainToClass(RenterFindManyArgs, request.query);
    return this.service.renters({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Renter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async renter(
    @common.Param() params: RenterWhereUniqueInput
  ): Promise<Renter | null> {
    const result = await this.service.renter({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Renter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRenter(
    @common.Param() params: RenterWhereUniqueInput,
    @common.Body() data: RenterUpdateInput
  ): Promise<Renter | null> {
    try {
      return await this.service.updateRenter({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          phoneNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Renter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRenter(
    @common.Param() params: RenterWhereUniqueInput
  ): Promise<Renter | null> {
    try {
      return await this.service.deleteRenter({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          phoneNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/rentals")
  @ApiNestedQuery(RentalFindManyArgs)
  async findRentals(
    @common.Req() request: Request,
    @common.Param() params: RenterWhereUniqueInput
  ): Promise<Rental[]> {
    const query = plainToClass(RentalFindManyArgs, request.query);
    const results = await this.service.findRentals(params.id, {
      ...query,
      select: {
        createdAt: true,
        endDate: true,

        house: {
          select: {
            id: true,
          },
        },

        id: true,

        renter: {
          select: {
            id: true,
          },
        },

        startDate: true,
        totalPrice: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/rentals")
  async connectRentals(
    @common.Param() params: RenterWhereUniqueInput,
    @common.Body() body: RentalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rentals: {
        connect: body,
      },
    };
    await this.service.updateRenter({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/rentals")
  async updateRentals(
    @common.Param() params: RenterWhereUniqueInput,
    @common.Body() body: RentalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rentals: {
        set: body,
      },
    };
    await this.service.updateRenter({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/rentals")
  async disconnectRentals(
    @common.Param() params: RenterWhereUniqueInput,
    @common.Body() body: RentalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rentals: {
        disconnect: body,
      },
    };
    await this.service.updateRenter({
      where: params,
      data,
      select: { id: true },
    });
  }
}
