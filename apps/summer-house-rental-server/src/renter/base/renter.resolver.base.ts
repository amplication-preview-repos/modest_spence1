/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Renter } from "./Renter";
import { RenterCountArgs } from "./RenterCountArgs";
import { RenterFindManyArgs } from "./RenterFindManyArgs";
import { RenterFindUniqueArgs } from "./RenterFindUniqueArgs";
import { CreateRenterArgs } from "./CreateRenterArgs";
import { UpdateRenterArgs } from "./UpdateRenterArgs";
import { DeleteRenterArgs } from "./DeleteRenterArgs";
import { RentalFindManyArgs } from "../../rental/base/RentalFindManyArgs";
import { Rental } from "../../rental/base/Rental";
import { RenterService } from "../renter.service";
@graphql.Resolver(() => Renter)
export class RenterResolverBase {
  constructor(protected readonly service: RenterService) {}

  async _rentersMeta(
    @graphql.Args() args: RenterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Renter])
  async renters(@graphql.Args() args: RenterFindManyArgs): Promise<Renter[]> {
    return this.service.renters(args);
  }

  @graphql.Query(() => Renter, { nullable: true })
  async renter(
    @graphql.Args() args: RenterFindUniqueArgs
  ): Promise<Renter | null> {
    const result = await this.service.renter(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Renter)
  async createRenter(@graphql.Args() args: CreateRenterArgs): Promise<Renter> {
    return await this.service.createRenter({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Renter)
  async updateRenter(
    @graphql.Args() args: UpdateRenterArgs
  ): Promise<Renter | null> {
    try {
      return await this.service.updateRenter({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Renter)
  async deleteRenter(
    @graphql.Args() args: DeleteRenterArgs
  ): Promise<Renter | null> {
    try {
      return await this.service.deleteRenter(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Rental], { name: "rentals" })
  async findRentals(
    @graphql.Parent() parent: Renter,
    @graphql.Args() args: RentalFindManyArgs
  ): Promise<Rental[]> {
    const results = await this.service.findRentals(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
