/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Renter as PrismaRenter,
  Rental as PrismaRental,
} from "@prisma/client";

export class RenterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RenterCountArgs, "select">): Promise<number> {
    return this.prisma.renter.count(args);
  }

  async renters(args: Prisma.RenterFindManyArgs): Promise<PrismaRenter[]> {
    return this.prisma.renter.findMany(args);
  }
  async renter(
    args: Prisma.RenterFindUniqueArgs
  ): Promise<PrismaRenter | null> {
    return this.prisma.renter.findUnique(args);
  }
  async createRenter(args: Prisma.RenterCreateArgs): Promise<PrismaRenter> {
    return this.prisma.renter.create(args);
  }
  async updateRenter(args: Prisma.RenterUpdateArgs): Promise<PrismaRenter> {
    return this.prisma.renter.update(args);
  }
  async deleteRenter(args: Prisma.RenterDeleteArgs): Promise<PrismaRenter> {
    return this.prisma.renter.delete(args);
  }

  async findRentals(
    parentId: string,
    args: Prisma.RentalFindManyArgs
  ): Promise<PrismaRental[]> {
    return this.prisma.renter
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .rentals(args);
  }
}
